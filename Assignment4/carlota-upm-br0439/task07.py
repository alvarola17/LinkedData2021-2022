# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qs0fKXy66gjMujO4ji_TeYlGeXU1TFWE

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/AndreaCimminoArriaga/LinkedData2021-2022/main/Assignment4/"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard-rdf', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

NS = Namespace("http://somewhere#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT 
    ?Subclasses
	WHERE { 
        ?Subclasses rdfs:subClassOf ns:Person.
  } 
  ''',
  initNs = { "ns": NS, "rdf": RDF}
)

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# He interprestado que debo obtener todos los individuos que pertenezcan a la clase Person,
# y aquellos que pertenezcan también a sus subclases

q2 = prepareQuery('''
  SELECT 
    ?Individuals
	WHERE { 
        {?Subclasses rdfs:subClassOf ns:Person.
        ?Individuals rdf:type ?Subclasses} UNION
        {?Individuals rdf:type ns:Person.}

  } 
  ''',
  initNs = { "ns": NS, "rdf": RDF, "vcard":VCARD}
)

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

'''
He interpretado que hay que devover al individuo, sus propieddaes,
al igual que la clase a la quepertenece al individuo.

Con lo cual, me devolverá:

Sara Jones, Given, Person
Sara Jones, FN, Person
Sara Jones, Family, Person

John Smith, Given, Person
John Smith, FN, Person
John Smith, Family, Person

Jane Smith, Given, Researcher
Jane Smith, FN, Researcher
Jane Smith, Family, Researcher

'''

q3 = prepareQuery('''
  SELECT 
    ?Individuals ?Properties ?Class
	WHERE { 
        {?Individuals rdf:type ns:Person.
        ?Individuals ?Properties ?o.
        ?Individuals rdf:type ?Class.} UNION
        {?Subclasses rdfs:subClassOf ns:Person.
        ?Individuals rdf:type ?Subclasses.
        ?Individuals ?Properties  ?o.
        ?Individuals rdf:type ?Class.}
        FILTER(?Properties != rdf:type)


  } 
  ''',
  initNs = { "ns": NS, "rdf": RDF, "vcard":VCARD}
)

for r in g.query(q3):
  print(r)

print(len(g.query(q3)))